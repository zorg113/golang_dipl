// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.19.6
// source: blacklist_service.proto

package blacklistpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	BlackListService_AddIp_FullMethodName     = "/blacklist.BlackListService/AddIp"
	BlackListService_RemoveIp_FullMethodName  = "/blacklist.BlackListService/RemoveIp"
	BlackListService_GetIpList_FullMethodName = "/blacklist.BlackListService/GetIpList"
)

// BlackListServiceClient is the client API for BlackListService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BlackListServiceClient interface {
	AddIp(ctx context.Context, in *AddIpRequest, opts ...grpc.CallOption) (*AddIpResponse, error)
	RemoveIp(ctx context.Context, in *RemoveIPRequest, opts ...grpc.CallOption) (*RemoveIPResponse, error)
	GetIpList(ctx context.Context, in *GetIpListRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[GetIpListResponse], error)
}

type blackListServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBlackListServiceClient(cc grpc.ClientConnInterface) BlackListServiceClient {
	return &blackListServiceClient{cc}
}

func (c *blackListServiceClient) AddIp(ctx context.Context, in *AddIpRequest, opts ...grpc.CallOption) (*AddIpResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddIpResponse)
	err := c.cc.Invoke(ctx, BlackListService_AddIp_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blackListServiceClient) RemoveIp(ctx context.Context, in *RemoveIPRequest, opts ...grpc.CallOption) (*RemoveIPResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveIPResponse)
	err := c.cc.Invoke(ctx, BlackListService_RemoveIp_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blackListServiceClient) GetIpList(ctx context.Context, in *GetIpListRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[GetIpListResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &BlackListService_ServiceDesc.Streams[0], BlackListService_GetIpList_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[GetIpListRequest, GetIpListResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type BlackListService_GetIpListClient = grpc.ServerStreamingClient[GetIpListResponse]

// BlackListServiceServer is the server API for BlackListService service.
// All implementations must embed UnimplementedBlackListServiceServer
// for forward compatibility.
type BlackListServiceServer interface {
	AddIp(context.Context, *AddIpRequest) (*AddIpResponse, error)
	RemoveIp(context.Context, *RemoveIPRequest) (*RemoveIPResponse, error)
	GetIpList(*GetIpListRequest, grpc.ServerStreamingServer[GetIpListResponse]) error
	mustEmbedUnimplementedBlackListServiceServer()
}

// UnimplementedBlackListServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedBlackListServiceServer struct{}

func (UnimplementedBlackListServiceServer) AddIp(context.Context, *AddIpRequest) (*AddIpResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddIp not implemented")
}
func (UnimplementedBlackListServiceServer) RemoveIp(context.Context, *RemoveIPRequest) (*RemoveIPResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveIp not implemented")
}
func (UnimplementedBlackListServiceServer) GetIpList(*GetIpListRequest, grpc.ServerStreamingServer[GetIpListResponse]) error {
	return status.Errorf(codes.Unimplemented, "method GetIpList not implemented")
}
func (UnimplementedBlackListServiceServer) mustEmbedUnimplementedBlackListServiceServer() {}
func (UnimplementedBlackListServiceServer) testEmbeddedByValue()                          {}

// UnsafeBlackListServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BlackListServiceServer will
// result in compilation errors.
type UnsafeBlackListServiceServer interface {
	mustEmbedUnimplementedBlackListServiceServer()
}

func RegisterBlackListServiceServer(s grpc.ServiceRegistrar, srv BlackListServiceServer) {
	// If the following call pancis, it indicates UnimplementedBlackListServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&BlackListService_ServiceDesc, srv)
}

func _BlackListService_AddIp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddIpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlackListServiceServer).AddIp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BlackListService_AddIp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlackListServiceServer).AddIp(ctx, req.(*AddIpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlackListService_RemoveIp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveIPRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlackListServiceServer).RemoveIp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BlackListService_RemoveIp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlackListServiceServer).RemoveIp(ctx, req.(*RemoveIPRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlackListService_GetIpList_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetIpListRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BlackListServiceServer).GetIpList(m, &grpc.GenericServerStream[GetIpListRequest, GetIpListResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type BlackListService_GetIpListServer = grpc.ServerStreamingServer[GetIpListResponse]

// BlackListService_ServiceDesc is the grpc.ServiceDesc for BlackListService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BlackListService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "blacklist.BlackListService",
	HandlerType: (*BlackListServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddIp",
			Handler:    _BlackListService_AddIp_Handler,
		},
		{
			MethodName: "RemoveIp",
			Handler:    _BlackListService_RemoveIp_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetIpList",
			Handler:       _BlackListService_GetIpList_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "blacklist_service.proto",
}
